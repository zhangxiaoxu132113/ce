一，简介
最近做一个项目，主要功能是根据一些关键词去百度爬取一些数据，如pv，uv等等，或者对应的URL等百度排名。
我们小组主要负责的是前端的功能，此前端非WEB前端，我们主要将用户导入的数据进行封转，然后转换为protobuf的传输格式对象，
最后保存到redis的队列中。
而另一个小组（由技术总监那边负责的）则是负责爬虫的业务，他会定时扫描redis队列的数据进行数据的抓取。

所以，会有两个java工程来协同工作。其中对接的桥梁就是redis的队列。
我们这边的项目会引入技术总监那边的一个jar，这个jar包的主要功能将数据提交到Redis队列，
我们需要传递过去的参数有队列名称，和list集合数据。（list中的集合是protobuf的传输对象）

那边的工程就会去扫描队列里面的数据，从队列lpop一个数据，直到队列里面的数据读完，然后开始调用回调的方法。
我们这边会去注册handler来响应那边的回调。（这里使用到了观察者模式）

二，流程
keyword，url是需要爬取的数据。
1，kw获取数据，对数据进行清洗的工作，然后保存到数据库，数据库里面的对应关系是taskid - > keyword,url [一个任务下面会有n个关键词，url连接]
2，定时器定时扫描未开始执行的任务，然后从根据任务的id获取对应下的所有keyword，url，封装为protobuf对象，并添加到集合中，最后将list扔到队列。
3，注册队列，只有被注册过的队列名，ce那边才会去扫描该队列下的数据。
4，注册handler，处理ce那边的回调。
5，ce那边处理redis的数据，知道数据没有了，就会调用我们注册的handler，将任务的id发给我们。
6，我们根据这个id再继续获取该任务id下面的所有keyword和url，然后根据他们的主键来获取爬虫抓取回来的数据。

三，代码的实现
两个项目的对接的是redis数据库，kw负责将前端的数据放到redis，ce取redis的数据，这个时候kw是生产者，ce是消费者。
【ce抓取到数据保存到数据库，然后kw去爬虫数据库里面取数据，这个时候ce是生产者，kw是消费者】

如何实现上述的过程，其实是由技术总监提供的jar中的TaskDirector类来实现的。

public class TaskDirector {
    private static final String QUEUE_TASK_SPLIT = "_";
    private static final String QUEUE_TASK_LIST_END = "_task";
    private static final String QUEUE_TASK_LIST_SUBMITED_END = "_submited";
    private static final String QUEUE_TASK_LIST_COMPLETED_END = "_completed";
    private static QueueClient client;
    private static List<String> watchList = null;
    private static ScheduledExecutorService executor;
    private static ITaskCompleteHandler handler;
    private static InitialLock lock = new InitialLock();

    public TaskDirector() {
    }

    public static void intialize(final String hosts) {
        lock.doInit(new Runnable() {
            public void run() {
                TaskDirector.client = QueueManager.getClient(hosts, "");
                TaskDirector.executor = Executors.newScheduledThreadPool(20);
                TaskDirector.watchList = new ArrayList(30);
            }
        });
    }

    public static void registerWatchQueue(final String queueName) {
        try {
            if(watchList.contains(queueName)) {
                return;
            }

            watchList.add(queueName);
            executor.scheduleAtFixedRate(new Runnable() {
                public void run() {
                    try {
                        TaskDirector.doWatchQueue(queueName);
                    } catch (Exception var2) {
                        ;
                    }

                }
            }, 10L, 60L, TimeUnit.SECONDS);
        } catch (Exception var2) {
            ;
        }

    }

    public static void registerHandler(ITaskCompleteHandler h) {
        handler = h;
    }

    public static void submitTaskDirect(String queueName, CrawlingTask task) {
        if(task != null && StringUtils.isNotEmpty(task.getTaskId()) && task.getProtos() != null && task.getProtos().size() > 0) {
            try {
                Iterator var3 = task.getProtos().iterator();

                while(var3.hasNext()) {
                    ProtoEntity p = (ProtoEntity)var3.next();
                    byte[] data = p.toByteArray();
                    client.enqueue(queueName, data);
                }
            } catch (Exception var5) {
                ;
            }
        }

    }

    public static void submitTask(String queueName, CrawlingTask task) {
        boolean hasWatched = false;
        Iterator var4 = watchList.iterator();

        while(var4.hasNext()) {
            String p = (String)var4.next();
            if(p.equals(queueName)) {
                hasWatched = true;
            }
        }

        if(hasWatched) {
            if(task != null && StringUtils.isNotEmpty(task.getTaskId()) && task.getProtos() != null && task.getProtos().size() > 0) {
                try {
                    var4 = task.getProtos().iterator();

                    while(var4.hasNext()) {
                        ProtoEntity p1 = (ProtoEntity)var4.next();
                        byte[] data = p1.toByteArray();
                        client.enqueueX(queueName, getTaskQueueName(queueName, task.getTaskId()), data);
                    }

                    client.enqueueX(queueName, getTaskListName(queueName), task.toByteArray());
                    client.enqueueX(queueName, getTaskListSubmitedName(queueName), formatBytes(task.getTaskId()));
                } catch (Exception var6) {
                    ;
                }
            }

        }
    }

    public static void cancelTask(String queueName, CrawlingTask task) {
        List tasksOrdered = taskList(queueName, false);

        for(int i = 0; i < tasksOrdered.size(); ++i) {
            if(((CrawlingTask)tasksOrdered.get(i)).equals(task.getTaskId())) {
                if(i == tasksOrdered.size() - 1) {
                    client.clearQueue(queueName);
                }

                client.clearQueue(getTaskQueueName(queueName, task.getTaskId()));
                client.queueTrimX(queueName, getTaskListName(queueName), (long)(i + 1), (long)(i - (tasksOrdered.size() - 1)));
                if(handler != null) {
                    handler.onTaskCancelled(queueName, task);
                }
                break;
            }
        }

    }

    public static List<CrawlingTask> upgradeTask(String queueName, CrawlingTask task) {
        List tasksOrdered = taskList(queueName, false);

        for(int i = 0; i < tasksOrdered.size() - 1; ++i) {
            if(((CrawlingTask)tasksOrdered.get(i)).getTaskId().equals(task.getTaskId())) {
                client.queueTrimX(queueName, getTaskListName(queueName), (long)(i + 1), (long)(i - (tasksOrdered.size() - 1)));
                client.queueInsertX(queueName, getTaskListName(queueName), ((CrawlingTask)tasksOrdered.get(i + 1)).toByteArray(), ((CrawlingTask)tasksOrdered.get(i)).toByteArray());
                break;
            }
        }

        return taskList(queueName, false);
    }

    public static List<CrawlingTask> taskList(String queueName, boolean needTaskLen) {
        List taskList = client.queueAllX(queueName, getTaskListName(queueName));
        ArrayList tasksOrdered = new ArrayList();
        if(taskList != null) {
            Iterator var5 = taskList.iterator();

            while(var5.hasNext()) {
                byte[] bytes = (byte[])var5.next();
                CrawlingTask task = new CrawlingTask();

                try {
                    ProtoEntity.parseFrom(task, bytes);
                    if(needTaskLen) {
                        task.setTaskLen(taskLen(queueName, task.getTaskId()));
                    }

                    tasksOrdered.add(task);
                } catch (Exception var8) {
                    var8.printStackTrace();
                }
            }
        }

        return tasksOrdered;
    }

    public static Long queueLen(String queueName) {
        Long len = client.queueLen(queueName);
        List queue = client.queueAllX(queueName, getTaskListName(queueName));
        CrawlingTask task;
        if(queue != null) {
            for(Iterator var4 = queue.iterator(); var4.hasNext(); len = Long.valueOf(len.longValue() + client.queueLenX(queueName, getTaskQueueName(queueName, task.getTaskId())).longValue())) {
                byte[] bytes = (byte[])var4.next();
                task = new CrawlingTask();

                try {
                    ProtoEntity.parseFrom(task, bytes);
                } catch (Exception var7) {
                    var7.printStackTrace();
                }
            }
        }

        return len;
    }

    public static void killQueue(String queueName) {
        List queue = client.queueAllX(queueName, getTaskListName(queueName));
        CrawlingTask task;
        if(queue != null) {
            for(Iterator var3 = queue.iterator(); var3.hasNext(); client.clearQueueX(queueName, getTaskQueueName(queueName, task.getTaskId()))) {
                byte[] bytes = (byte[])var3.next();
                task = new CrawlingTask();

                try {
                    ProtoEntity.parseFrom(task, bytes);
                } catch (Exception var6) {
                    var6.printStackTrace();
                }
            }
        }

        client.clearQueueX(queueName, getTaskListName(queueName));
        client.clearQueue(queueName);
    }

    private static void doWatchQueue(String queueName) {
        Long len = client.queueLen(queueName);
        if(len.longValue() == 0L) {
            byte[] b = client.queueHeadX(queueName, getTaskListName(queueName));
            if(b != null) {
                CrawlingTask task = new CrawlingTask();

                try {
                    ProtoEntity.parseFrom(task, b);
                } catch (Exception var5) {
                    var5.printStackTrace();
                }

                Long lenX = client.queueLenX(queueName, getTaskQueueName(queueName, task.getTaskId()));
                if(lenX.longValue() == 0L) {
                    client.dequeueNoBlockX(queueName, getTaskListName(queueName));
                    if(handler != null) {
                        handler.onTaskCompleted(queueName, task);
                    }

                    client.enqueueX(queueName, getTaskListCompletedName(queueName), formatBytes(task.getTaskId()));
                } else {
                    client.renameX(getTaskQueueName(queueName, task.getTaskId()), queueName);
                }
            }
        }

    }

    private static Long taskLen(String queueName, String taskId) {
        Long len = client.queueLenX(queueName, getTaskQueueName(queueName, taskId));
        if(len.longValue() == 0L) {
            len = client.queueLen(queueName);
        }

        return len;
    }

    private static byte[] formatBytes(String taskId) {
        return String.format("%s(%s)", new Object[]{taskId, DateUtils.formatDate(new Date(), "yyyy-MM-dd HH:mm:ss")}).getBytes();
    }

    private static String getTaskListName(String queueName) {
        return queueName + "_task";
    }

    private static String getTaskListSubmitedName(String queueName) {
        return queueName + "_submited";
    }

    private static String getTaskListCompletedName(String queueName) {
        return queueName + "_completed";
    }

    private static String getTaskQueueName(String queueName, String taskId) {
        return queueName + "_" + taskId;
    }
}


通过分析这个类，我们就可以知道两个项目之间是如何进行协作的。
（1）初始化数据
    public static void intialize(final String hosts) {
        lock.doInit(new Runnable() {
            public void run() {
                TaskDirector.client = QueueManager.getClient(hosts, "");
                TaskDirector.executor = Executors.newScheduledThreadPool(20);
                TaskDirector.watchList = new ArrayList(30);
            }
        });
    }
该方法主要是对redis的客户端进行初始化，线程池的初始化，队列数量集合的初始化。
其中使用InitialLock类来做初始化，
1，利用开启一个线程来处理一些比较耗时操作，如何redis的初始化，线程池的初始化。【然而，我测试过，其实那里的代码不会用太久的时间】
2，使用双重校验锁机制来确定该代码只会被执行一次。

    public void doInit(Runnable initer) {
        if(!this.inited) {
            Object var2 = this.syncRoot;
            synchronized(this.syncRoot) {
                if(!this.inited) {
                    initer.run();
                    this.inited = true;
                }

            }
        }
    }

（2）注册redis队列

    public static void registerWatchQueue(final String queueName) {
        try {
            if(watchList.contains(queueName)) {
                return;
            }

            watchList.add(queueName);
            executor.scheduleAtFixedRate(new Runnable() {
                public void run() {
                    try {
                        TaskDirector.doWatchQueue(queueName);
                    } catch (Exception var2) {
                        ;
                    }

                }
            }, 10L, 60L, TimeUnit.SECONDS);
        } catch (Exception var2) {
            ;
        }

    }

1，添加队列名称到list集合，如果添加的集合已经存在，则不保存。
2，开启线程池每隔一分钟调用一次doWatchQueue(queueName)方法。

（3）监控队列情况
    private static void doWatchQueue(String queueName) {
        Long len = client.queueLen(queueName);
        if(len.longValue() == 0L) {
            byte[] b = client.queueHeadX(queueName, getTaskListName(queueName));
            if(b != null) {
                CrawlingTask task = new CrawlingTask();

                try {
                    ProtoEntity.parseFrom(task, b);
                } catch (Exception var5) {
                    var5.printStackTrace();
                }

                Long lenX = client.queueLenX(queueName, getTaskQueueName(queueName, task.getTaskId()));
                if(lenX.longValue() == 0L) {
                    client.dequeueNoBlockX(queueName, getTaskListName(queueName));
                    if(handler != null) {
                        handler.onTaskCompleted(queueName, task);
                    }

                    client.enqueueX(queueName, getTaskListCompletedName(queueName), formatBytes(task.getTaskId()));
                } else {
                    client.renameX(getTaskQueueName(queueName, task.getTaskId()), queueName);
                }
            }
        }

    }

1，这个方法主要是判断队列的长度是否为0，如果是，则说明任务执行完毕，将队列销毁，在submit的队列中记录提交任务的记录，
并在调用对调的函数（这个handler是kw那边需要注册处理的）
2，由于不同的任务提交就会生成一个队列，队列的名称类似于queue_name_id，id是不同的。
而CE那边是只知道定义好的队列名称，后面的id它是不知道的，如queue_name，ce只知道这个名称。所以我们就要将每一个队列进行优先级的排序，第一个取出来的队列，
如果长度不为0，则将这个队列的名称改为queue_name，知道这个queue_name数据处理完毕，我们再处理剩下的队列。

client.renameX(getTaskQueueName(queueName, task.getTaskId()), queueName);

（4）提交任务

    public static void submitTask(String queueName, CrawlingTask task) {
        boolean hasWatched = false;
        Iterator var4 = watchList.iterator();

        while(var4.hasNext()) {
            String p = (String)var4.next();
            if(p.equals(queueName)) {
                hasWatched = true;
            }
        }

        if(hasWatched) {
            if(task != null && StringUtils.isNotEmpty(task.getTaskId()) && task.getProtos() != null && task.getProtos().size() > 0) {
                try {
                    var4 = task.getProtos().iterator();

                    while(var4.hasNext()) {
                        ProtoEntity p1 = (ProtoEntity)var4.next();
                        byte[] data = p1.toByteArray();
                        client.enqueueX(queueName, getTaskQueueName(queueName, task.getTaskId()), data);
                    }

                    client.enqueueX(queueName, getTaskListName(queueName), task.toByteArray());
                    client.enqueueX(queueName, getTaskListSubmitedName(queueName), formatBytes(task.getTaskId()));
                } catch (Exception var6) {
                    ;
                }
            }

        }
    }

1，提交的任务队列是否存在，且提交的数据的长度是否合法，如果存在且合法则进行下面的操作。
2，将提交的集合数据放到队列，并记录提交信息

（5）注册句柄

    public static void registerHandler(ITaskCompleteHandler h) {
        handler = h;
    }

1，kw注册这个句柄，只要方法执行完，就回调这个句柄的方法，返回任务id。



上述五个步骤简单的描述数据是如何通过CrawlDirector放到redis队列。
接下来需要有一个类来专门处理数据放到redis的操作还有数据回调的操作。
TaskQuartz 定时器类，这个类会定时扫描任务 通过调用CrawDirector的submitTask方法将数据提交。
TaskCallBack 回调类，这个类会去注册爬虫队列，并注册Handler，实现数据的回调。
QueueClientHelper 队列的帮助类，定义一些队列名


-----------------------------------------------------------------------------------------------------

今天讨论一下，如何设计存储微博图片表。
场景描述：
用户可以在发表微博的时候，选择上传多张图片，也就是说一条微博会关联多个图片，而且微博的图片包括了高清无损的图片和压缩处理过的图片。
设计方案：
（一）
设计一张图片表
id          id主键
weibo_id    微博id
name        图片名称

如果有九张图片，就往这张表插入九条数据，然后通过weibo_id来找到对应的图片。
缺点，这样设计，如果微博越来越多，这张表的数量也是9倍的增长速度。

（二）
id          id主键
weibo_id    微博id
image_ids   图片列表集合

方案二是对方案一的优化，将多张图片的信息（图片名，图片的相对路径）作为list并转化为json数据保存到image_ids字段中。


好了，采用第二种方案可以解决了数据库表的存储，现在来考虑图片在服务器的存储问题。
图片存储到服务器一般是URL+图片名，图片名可以用uuid生成的字符来存储。URL对应的是图片放到服务器的位置，但是考虑到如果更换了服务器，这个时候如果
把URL也保存到数据库的话就比较麻烦了。所以，我打算用一个常量类来保存url的值。如果换了服务器只要修改这个值就行了。

同样道理，当图片上传的时候将图片保存到服务器的时候，文件名不变，将图片保存到不同的文件夹，一个放高清，一个放压缩过的。取数据的时候只要URL+文件夹目录名称就行了。

但是考虑到图片上传的数量很庞大的情况，所以对图片上传的目录以时间作为文件夹的分类。至此方案设计完成。
original、thumbnail

--------------------------------------------------------------------------------------------------------
微博数据库表的设计 app_weibo

id              id主键
user_id         用户id主键
text            微博内容
reposts_count   转发数
comments_count  评论数
attitudes_count 表态数
video_id        是否有视频
pic_ids         图片id集合，如果没有图片，默认是0
src_tid         微博来源【如果是原创，则默认是0】
visible         可见性【0-普通，1-仅好友可见，2-私密】
source          来源
geo             发布地理字段
timeline        创建时间
last_updatime   更新时间

----------------------------------------------------------------------------------------------------------
评论表           app_comments

id              id主键
weibo_id        微博id主键
user_id         评论者的id主键
text            评论内容
attitudes_count 表态数
timeline        创建时间

----------------------------------------------------------------------------------------------------------


秒杀系统的架构实现
1，静态资源文件如js,css，图片还有一些静态页面都会被放到CDN中，不用访问后台系统
2，获取后台系统时间，这个是不用优化，因为这个过程只需要返回当前系统时间，而这个时间是ns级别的，一秒可以调用亿次。
3，当秒杀接口暴露的时候，如何扛住一个商品库存的更新操作可以顶住几万级别的，而且保证事务安全控制的情况下。
注：在没有事务的情况下，update的操作1S可以扛住上万次。
如果直接使用java事务+MySQL执行更新update操作，当第一个访问执行update-1的时候，该数据被行级锁锁住，直到该操作commit提交或者
rollback回滚。该行级锁才会被释放，如果该数据是热点数据的话，一秒并发上万次的话，估计就扛不住了。

解决方案
Redis + MQ + MySQL
1，redis作为原子计算器，保证库存数据操作的原子性
2，将一些操作信息放入消息队列
3，将消息队列的消息放入到MySQL中

